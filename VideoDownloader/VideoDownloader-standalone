#!/usr/bin/python

# This is a part of the external applets for Cairo-Dock
# Copyright : (C) 2017 by Fabounet
# E-mail : fabounet@glx-dock.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# http://www.gnu.org/licenses/licenses.html#GPL
#

####################
### dependancies ###
####################
from __future__ import print_function  # must be on the first line
from CDApplet import CDApplet, _

import os
import subprocess
import threading
import re

try:
	import gtk
except:
	from gi.repository import Gtk
	from gi.repository import Gdk

try:
	import glib
except:
	from gi.repository import GLib as glib

####################
### Applet class ###
####################
class Applet(CDApplet):
	def __init__(self):
		# define internal variables
		self.videos_directory = ""
		self.structs_list = {}
		self.next_id = 0
		self.current_id = 0
		# call high-level init
		CDApplet.__init__(self)
		glib.timeout_add_seconds (86400, self._check_updates)  # once a day
	
	##### private methods #####
	
	def download_url(self, url):
		print("download_url(" + url + ")")
		
		if not os.path.exists (self.cShareDataDir+"/youtube-dl"):
			self.icon.SetLabel(_("installing youtube-dl..."))
			subprocess.call(['wget','https://yt-dl.org/downloads/latest/youtube-dl', '-O', self.cShareDataDir+"/youtube-dl"], shell=False)
			subprocess.call(['chmod', '+x', self.cShareDataDir+"/youtube-dl"], shell=False)
			#wget https://yt-dl.org/downloads/latest/youtube-dl.sig -O youtube-dl.sig
			#gpg --verify youtube-dl.sig /usr/local/bin/youtube-dl
			#rm youtube-dl.sig
		else:
			self.icon.SetLabel(_("updating youtube-dl..."))
			self._check_updates()
		
		# go to video folder
		if not (self.videos_directory == os.path.abspath('.')):
			os.chdir(self.videos_directory)
		
		# give the user an immediate feedback by making the icon "busy"
		self.icon.Animate('busy',99)
		
		# append a new struct to the list of structs
		self.next_id = self.next_id + 1
		struct = {
			'id'      : self.next_id, 
			'url'     : url,
			'title'   : '',
			'filename': '',
			'thread'  : None, 
			'process' : None,
			'progress': 0.0,
			'size'    : '',
			'cancel'  : False }
		self.structs_list[self.next_id] = struct
		self.current_id = self.next_id
		
		# get the title, and display it
		p = subprocess.Popen([self.cShareDataDir+"/youtube-dl","--get-title", "--get-filename","-o",self.config['option_naming'],url],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=False)
		title_name, errors = p.communicate()
		title_name=title_name.rstrip()
		title_name_s = title_name.split("\n")
		if len(title_name_s) < 1:
			# failed ...
			pass
		title = title_name_s[0]
		filename = title_name_s[1]
		print ("downloading %s into %s" % (title, filename))
		self.icon.SetLabel(_("downloading %s") % title)
		struct['title'] = title
		struct['filename'] = filename
		
		# download video in a new thread
		thread = threading.Thread(target=self.download_url_thread, args=[struct])
		thread.start()
		struct['thread'] = thread
	
	def download_url_thread(self,struct):
		url = struct['url']
		id = struct['id']
		print("url: "+url)
		# launch the downloader in a new process
		options = self.config['option_download'].split(' ')
		p = subprocess.Popen([self.cShareDataDir+"/youtube-dl","--newline"] + options + ["-o",self.config['option_naming'],url],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=False)
		struct['process'] = p
		
		# prepare the display of progress on the icon
		self.icon.Animate('',0)  # stop the "busy" animation
		self.icon.AddDataRenderer("progressbar", 1, "")  # set a "progressbar" renderer for 1 value
		self.icon.SetQuickInfo('%d%%' % int(struct['progress']*100))  # display something immediately
		
		# read the output of the downloader to get the progress
		expr = re.compile(".* ([0-9\.,]*)% .*")
		progress = 0.0
		size = ''
		for line in iter(p.stdout.readline,''):
			result = re.sub(expr, "\\1", line)  # extract the percentage
			if result != line:  # skip any other line
				progress = float(result)/100.
				struct['progress'] = progress
				# extract the size once and for all
				if not size:
					expr2 = re.compile(".* of ([^ ]*).*")
					size = re.sub(expr2, "\\1", line)
					if size != line:
						size = size.rstrip()
						struct['size'] = size
						self.icon.SetLabel(_("downloading %s (%s)") % (struct['title'],size))
				print (" progress: "+str(progress))
				if id == self.current_id:  # our task is the most recent one
					self.icon.RenderValues([progress])
					self.icon.SetQuickInfo("%d%%" % int(progress*100))
				
		print ("%s complete" % struct['title'])
		struct['process'] = None  # process has finished
		struct['thread'] = None
		
		# clean the icon
		if id == self.current_id:
			new_current_id = 0
			for key, value in self.structs_list.iteritems():  # look for previous download
				if key == id:
					print ("exclude this download")
					continue  # exclude this download
				progress = value['progress']
				if int(progress) < 1:
					new_current_id = max(new_current_id, value['id'])
			self.current_id = new_current_id
			print ("new_current_id: %d" % new_current_id)
			if new_current_id == 0:  # no other active tasks
				self.icon.SetLabel(self.config['original_name'])
				self.icon.AddDataRenderer("", 0, "")  # remove the "progressbar" renderer
				self.icon.SetQuickInfo('')  # remove quick-info
			else:
				self.icon.SetLabel(_("downloading %s (%s)") % (self.structs_list[new_current_id]['title'],self.structs_list[new_current_id]['size']))
				self.icon.SetQuickInfo("%d%%" % int(self.structs_list[new_current_id]['progress']*100))
				
		# inform the user in a light way
		if not struct['cancel']:
			if int(progress) == 1:  # 100% completed => success
				self.icon.ShowDialog(_("Download finished"), 3)
			else:  # for instance wrong URL, or timeout before completion
				self.icon.ShowDialog(_("Download failed"), 3)
			self.icon.Animate('rotate',3)
		
	def get_from_clipboard(self):
		try:
			clipboard = gtk.clipboard_get(gtk.gdk.SELECTION_PRIMARY)  #mouse selection
			if not clipboard:
				clipboard = gtk.clipboard_get()  # ctrl+c selection
		except:
			clipboard = Gtk.Clipboard.get(Gdk.SELECTION_PRIMARY)  #mouse selection
			if not clipboard:
				clipboard = Gtk.Clipboard.get()  # ctrl+c selection
		return clipboard.wait_for_text()
	
	def _check_updates(self):
		subprocess.call([self.cShareDataDir+"/youtube-dl", '-U'], shell=False)
		
	##### applet definition #####
	
	def get_config(self,keyfile):
		print("*** get config")
		self.config['videos_directory'] = keyfile.get('Configuration', 'videos_directory')
		self.config['original_name'] 	= keyfile.get('Icon', 'name')
		self.config['option_naming'] 	= keyfile.get('Configuration', 'option_naming')
		self.config['option_download'] 	= keyfile.get('Configuration', 'option_download')
		
		self.videos_directory = self.config['videos_directory']
		if not self.videos_directory:
			p = subprocess.Popen(["xdg-user-dir","VIDEOS"],stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=False)
			directoryName, errors = p.communicate()
			directoryName=directoryName.rstrip()
			self.videos_directory = os.path.abspath(directoryName)
		print("videos_directory: " + self.videos_directory)
		
		if not self.config['option_naming']:
			self.config['option_naming'] = "%(title)s.%(ext)s"
		
		if not self.config['option_download']:
			self.config['option_download'] = "--ignore-config --no-color -f best"
		
	def end(self):
		print("*** end of demo_python")
		# terminate any remaining threads...
		
	
	def begin(self):
		print("*** begin")
		
	def reload(self):
		print("*** reload")
		
	##### callbacks #####
	
	def on_click(self,iState):
		print("*** click")
		subprocess.call(['xdg-open',self.videos_directory], shell=False)
	
	def on_middle_click(self):
		print("*** middle click")
		url = self.get_from_clipboard()
		self.download_url(url)
	
	def on_build_menu(self):
		print("*** build menu")
		items = [ {
					"label": _("Open videos folder (left-click)"),
					"icon" : "gtk-open",
					"menu" : CDApplet.MAIN_MENU_ID,
					"id"   : 1
				}, {
					"label": _("Download from clipboard (middle-click)"),
					"icon" : "gtk-paste",
					"menu" : CDApplet.MAIN_MENU_ID,
					"id"   : 2
				} ]
		if len(self.structs_list) != 0:  # append a separator before the list of videos
			items.append({ "type" : CDApplet.MENU_SEPARATOR, "menu" : CDApplet.MAIN_MENU_ID })
		nb = 0
		for key, value in self.structs_list.iteritems():  # append each downloaded videos
			progress = value['progress']
			if int(progress) == 1:  # download is finished, open the video
				items.append({
					"label": value['title'],
					"icon" : "gtk-media-play-ltr",
					"menu" : CDApplet.MAIN_MENU_ID,
					"id"   : 10 + key
					})
			else:  # download is either in progress, or stopped
				thread = value['thread']
				if thread == None:  # stopped
					print("no thread")
					items.append({
						"label": value['title'] + " (" + str(int(progress*100.)) + "%)",
						"icon" : "gtk-refresh",
						"menu" : CDApplet.MAIN_MENU_ID,
						"id"   : 10 + key
						})
				else:   # in progress
					print("thread is running")
					items.append({
						"label": value['title'] + " (" + str(int(progress*100.)) + "%)",
						"icon" : "gtk-cancel",
						"menu" : CDApplet.MAIN_MENU_ID,
						"id"   : 10 + key
						})
			if nb > 10:
				break
			nb = nb + 1
		self.icon.AddMenuItems(items)
		
	def on_menu_select(self,iNumEntry):
		print("*** choice",iNumEntry,"has been selected !")
		if iNumEntry == 1:
			subprocess.call(['xdg-open',self.videos_directory], shell=False)
		elif iNumEntry == 2:
			url = self.get_from_clipboard()
			self.download_url(url)
		else:
			id = iNumEntry - 10
			if id in self.structs_list:  # better safe than sorry
				struct = self.structs_list[id]
				if int(struct['progress']) == 1:  # download is finished, open the video
					subprocess.call(['xdg-open',self.videos_directory + '/' + struct['filename']], shell=False)
				else:  # download is either in progress, or stopped
					thread = struct['thread']
					if thread == None:  # stopped
						print("no thread")
						struct['cancel'] = False
						# recreate the thread ...
						self.icon.SetLabel(_("downloading %s (%s)") % (struct['title'], struct['size']))
						self.current_id = id
						thread = threading.Thread(target=self.download_url_thread, args=[struct])
						thread.start()
						struct['thread'] = thread
					else:   # in progress
						print("thread is running")
						struct['cancel'] = True  # mark the thread as 'cancelled', so that it knows it was intentional
						p = struct['process']
						if p:
							p.terminate()  # send a SIGTERM
							p.wait()  # avoid zombi (might result in a lock if the process doesn't terminate; use 'poll' in that case)

	
	def on_scroll(self,bScrollUp):
		print("*** scroll !")
	
	def on_drop_data(self,cReceivedData):
		print("*** received",cReceivedData)
		self.download_url(cReceivedData)
	
	def on_answer_dialog(self,button, answer):
		print("*** answer dialog :",button, answer)
	
	def on_shortkey(self,key):
		print("*** shortkey :",key)
	
	
############
### main ###
############
if __name__ == '__main__':
	Applet().run()
