#!/usr/bin/python
# -.- coding: utf-8 -.-
### The name of this applet is "SubDock"; it is placed in a folder named "demo_python", with a file named "auto-load.conf" which describes it.
### Copy this folder into ~/.config/cairo-dock/third-party to let the dock register it automatically.
### In the folder we have :
### "demo_python" (the executable script), "demo_python.conf" (the default config file), "auto-load.conf" (the file describing our applet), "icon" (the default icon of the applet) and "preview" (a preview of this applet)

### This very simple applet features a counter from 0 to iMaxValue It displays the counter on the icon with a gauge and a quick info.
### Scroll on the icon increase or decrease the counter.
### The menu offers the possibility to set some default value.
### Left click on the icon will set a random value.
### Middle click on the icon will raise a dialog asking you to set the value you want.
### If you drop some text on the icon, it will be used as the icon's label.

####################
### dependancies ###
####################
import sys
import os.path
import ConfigParser
import random
import gobject
import glib
import dbus
import gtk, wnck, os,pynotify,shutil
from dbus.mainloop.glib import DBusGMainLoop

##################################
### get our applet on the bus ###
##################################
applet_name = os.path.basename(os.path.abspath(".")) # the name of the applet must the same as the folder.
applet_path = "/org/cairodock/CairoDock/"+applet_name # path where our object is stored on the bus.
DBusGMainLoop(set_as_default=True)
bus = dbus.SessionBus()
try:
	applet_object = bus.get_object("org.cairodock.CairoDock", applet_path)
except dbus.DBusException:
	print ">>> module '"+applet_name+"' can't be found on the bus, exit."
	sys.exit(2)
myIcon = dbus.Interface(applet_object, "org.cairodock.CairoDock.applet") # this object represents our applet and also our icon. It can be either in a dock or in a desklet, we don't have to care.


#On cree un dossier temporaire dans lequel on va mettre les icones Attention si on #crash le dock cette applet ne marchera pas car ce dossier existe..
os.mkdir("/tmp/Subdock/")
#this a try to put my icons in a 
#remote_object = bus.get_object("org.cairodock.CairoDock",
#                "/org/cairodock/CairoDock")
#iface = dbus.Interface(remote_object, "org.cairodock.CairoDock")

### we'll have a sub-dock, so we also get the sub-icons object ###
sub_icons_object = bus.get_object("org.cairodock.CairoDock", applet_path+"/sub_icons")
mySubIcons = dbus.Interface(sub_icons_object, "org.cairodock.CairoDock.subapplet") # this object represents the list of icons contained in our sub-dock, or in our desklet. We'll add them one by one later, giving them a unique ID, which will be used to identify each of them.

##################################
### callbacks on the main icon ###
##################################
def action_on_click(iState):
	print ">>> clic !"
	set_counter(random.randint(0,myApplet.config['iMaxValue']))

def action_on_middle_click():
	print ">>> middle clic !"
	#myIcon.AskValue("Set the value you want", myApplet.count, myApplet.config['iMaxValue']);

def action_on_build_menu():
    print ">>> build menu !"
    myIcon.PopulateMenu(["set min value", "set medium value", "set max value"])
    
def action_on_menu_select(iNumEntry):
    print ">>> choice",iNumEntry,"has been selected !"
    if iNumEntry == 0:
        myApplet.set_counter(0)
    elif iNumEntry == 1:
        myApplet.set_counter(myApplet.config['iMaxValue']/2)
    elif iNumEntry == 2:
        myApplet.set_counter(myApplet.config['iMaxValue'])

def action_on_scroll(bScrollUp):
    print ">>> scroll !"
    if bScrollUp:
		print "scroll up"
        #count = min(myApplet.config['iMaxValue'], myApplet.count+1)
    else:
        #count = max(0, myApplet.count-1)
		print "scroll down"
    #myApplet.set_counter(count)

def action_on_drop_data(cReceivedData):
    print ">>> received",cReceivedData
    #myApplet.icon.SetLabel(cReceivedData)

def action_on_answer(answer):
    print ">>> answer :",answer
    myApplet.set_counter(int (answer))

##################################
### callbacks on the sub-icons ###
##################################
def on_click_sub_icon(iState, cIconID):
    print "clic on the sub-icon '"+cIconID+"' !"

def on_scroll_sub_icon(iState, cIconID):
	print "scoll sur la sub-icon"+cIconID

###############################
### callbacks on the applet ###
###############################
def action_on_stop():
    print ">>> our module is stopped"
    loop.quit()

def action_on_reload(bConfigHasChanged):
    print ">>> our module is reloaded"
    if bConfigHasChanged:
        print ">>> and our config has changed"
        myApplet.get_config()
        #myIcon.AddDataRenderer("gauge", 1, myApplet.config['cTheme'])
        #myIcon.RenderValues([float(myApplet.count)/myApplet.config['iMaxValue']])
        #myApplet.sub_icons.RemoveSubIcon("any")
        #myApplet.sub_icons.AddSubIcons(["icon 1", "firefox-3.0", "id1", "icon 2", "nautilus", "id2", "icon 3", "thunderbird", "id3"])

##########################
### connect to signals ###
##########################
myIcon.connect_to_signal("on_click", action_on_click) # when the user left-clicks on our icon.
myIcon.connect_to_signal("on_middle_click", action_on_middle_click) # when the user middle-clicks on our icon.
myIcon.connect_to_signal("on_build_menu", action_on_build_menu) # when the user right-clicks on our applet (which builds the menu)
myIcon.connect_to_signal("on_menu_select", action_on_menu_select) # when the user selects an entry of this menu.
myIcon.connect_to_signal("on_scroll", action_on_scroll) # when the user scroll up or down on our icon.
myIcon.connect_to_signal("on_drop_data", action_on_drop_data) # when the user drops something on our icon.
#myIcon.connect_to_signal("on_init_module", action_on_init)
myIcon.connect_to_signal("on_answer", action_on_answer) # when the user answer a question.
myIcon.connect_to_signal("on_stop_module", action_on_stop) # when the user deactivate our applet (or the DBus plug-in, or when the Cairo-Dock is stopped).
myIcon.connect_to_signal("on_reload_module", action_on_reload) # when the user changes something in our config, or when the desklet is resized (with no change in the config).
mySubIcons.connect_to_signal("on_click_sub_icon", on_click_sub_icon) # when the user left-clicks on a sub-icon.
mySubIcons.connect_to_signal("on_scroll_sub_icon", on_scroll_sub_icon)

class Applet:
	def __init__(self,icon= None,sub_icons = None):
		self.icon = icon
		self.sub_icons = sub_icons
		self.config = {}
		self.conf_file = os.path.expanduser("~/.config/cairo-dock/current_theme/plug-ins/"+applet_name+"/"+applet_name+".conf") # path to the conf file of our applet.
		#self.count = 10
		pynotify.init('someName')
		imageURI = "/usr/share/cairo-dock/cairo-dock.svg"
		message = "Wellcome to this applet better version! "
		n = pynotify.Notification("cairo-dock",message ,imageURI)
		n.show()
		
    
	def get_config(self):
		keyfile = ConfigParser.RawConfigParser()
		keyfile.read(self.conf_file)
		#self.config['cTheme']         = keyfile.get('Configuration', 'theme')
		#self.config['iMaxValue']     = keyfile.getint('Configuration', 'max value')
		self.config['yesno']         = keyfile.getboolean('Configuration', 'yesno')
    
	def load(self):
		myIcon.ShowDialog("I'm connected to Cairo-Dock !", 4) # show a dialog with this message for 4 seconds.
		#myIcon.SetQuickInfo(format(self.count, "d")) # write the counter value on the icon.
		#myIcon.AddDataRenderer("gauge", 1, self.config['cTheme']) # set a gauge with the theme read in config to display the value of the counter.
		#myIcon.RenderValues([float(self.count)/self.config['iMaxValue']]) # draw the gauge with an initial value.
        #self.sub_icons.RemoveSubIcon("id2") # remove the 2nd icon of our sub-dock.
		#self.sub_icons.SetQuickInfo("1", "id1") # write the ID on each icon of the sub-dock.
		#self.sub_icons.SetQuickInfo("3", "id3")
		#self.sub_icons.SetQuickInfo("4", "id4")
    
	def set_counter(self,count):
		self.count = count
		percent = float(self.count)/self.config['iMaxValue']
		myIcon.RenderValues([percent])
		myIcon.SetQuickInfo(format(self.count, "d"))

	def window_closed(self,screen,window):
		ferme = window.get_name()
		PID = window.get_pid()
		#print ferme
	
	def application_opened(self,screen,application):
		PID = application.get_pid()
		Appli_ouverte = application.get_name()
		Icon = application.get_icon().save("/tmp/Subdock/Icon"+str(PID),"png" , ) #Change your user name Here
		Icon_path = "/tmp/Subdock/Icon"+str(PID)
		#print Icon_path
		mySubIcons.AddSubIcons([Appli_ouverte, Icon_path, Appli_ouverte])

		#create the same thing but in a SubDock called SubDock-2 I did not find the 
		#way to delete those launchers. I should ask fabounet
		#iface.CreateLauncherFromScratch(Icon_path, Appli_ouverte, str(PID), "SubDock-2")
		mySubIcons.RemoveSubIcon("cairo-dock")
		mySubIcons.RemoveSubIcon("Tableau de bord supérieur de côté étendu")
		mySubIcons.RemoveSubIcon("File Manager")

	def application_closed(self,screen,application):
		PID = application.get_pid()
		Appli_ferme = application.get_name()
		os.remove("/tmp/Subdock/Icon"+str(PID))
		mySubIcons.RemoveSubIcon(Appli_ferme)
		
	def window_opened(self,screen,window):
		ferme = window.get_name()
		PID = window.get_pid()
		#print ferme
	
	def test(self):
		self.screen = wnck.screen_get_default()
		self.screen.connect("window_opened", self.window_opened)
		self.screen.connect("window_closed", self.window_closed)
		self.screen.connect("application_opened", self.application_opened)
		self.screen.connect("application_closed", self.application_closed)
		#screen.connect("class_group_opened", self.class_group_opened)
		#screen.connect("class_group_closed", self.class_group_closed)



	def main(self):
		#on Supprime le dossier ou se trouve les icones quand on quitte le dock ou on 
		#quitte la session...
		shutil.rmtree("/tmp/Subdock/")
		gtk.main()

############
### main ###
############
if __name__ == '__main__':
	myApplet = Applet()
	myApplet.get_config()
	myApplet.load()
	myApplet.test()
	loop = gobject.MainLoop()
	loop.run()
	myApplet.main()
	print ">>> bye"
	sys.exit(0)
