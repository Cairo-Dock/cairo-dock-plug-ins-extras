#!/usr/bin/ruby

# This is a part of the external demo_ruby applet for Cairo-Dock
#
# Author: Eduardo Mucelli Rezende Oliveira
# E-mail: edumucelli@gmail.com or eduardom@dcc.ufmg.br
#
# This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

# This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

# This very simple applet features a counter from 0 to max_value. It displays the counter on the icon with a gauge and a quick info.
# Scroll on the icon increase or decrease the counter
# The menu offers the possibility to set some default value
# Left click on the icon will set a random value
# Middle click on the icon will raise a dialog asking you to set the value you want
# If you drop some text on the icon, it will be used as the icon's label
# Be aware to the messages, they are very wise :-)

require 'rubygems'
require 'rbus'
require 'parseconfig'

applet_name = File.basename(Dir.getwd)						 							# nome do applet, neste caso Ã© demo_ruby
applet_path = "/org/cairodock/CairoDock/#{applet_name}"  	 							# path where our object is stored on the bus

bus = RBus.session_bus
applet_object = bus.get_object('org.cairodock.CairoDock', applet_path)					# the main icon object
applet_object.interface!('org.cairodock.CairoDock.applet')								# get the services available to the main icon

applet_sub_icons_object = bus.get_object("org.cairodock.CairoDock", "#{applet_path}/sub_icons")
applet_sub_icons_object.interface!("org.cairodock.CairoDock.subapplet")  				# list of icons contained in our sub-dock, or in our desklet


conf = ParseConfig.new(File.expand_path("~/.config/cairo-dock/current_theme/plug-ins/#{applet_name}/#{applet_name}.conf"))

class String
	def to_b																			# string to boolean
	    ["true", "1", "T", "t"].include?(self.downcase)
    end
end

class Applet
	attr_accessor :counter, :configuration
	def initialize (applet, applet_sub_icons, conf)
		@icon = applet
		@sub_icons = applet_sub_icons
		@conf = conf
		self.counter = 0
		self.configuration = get_configuration_parameters
	end
	def start
		@icon.ShowDialog("I'm connected to Cairo-Dock !", 4)  							# show a dialog with this message for 4 seconds
		@icon.SetQuickInfo("#{self.counter}")			  								# write the counter value on the icon
		@icon.AddDataRenderer("gauge", 1, self.configuration['theme'])  				# set 1 gauge with the theme read in config
		@icon.RenderValues([Float(self.counter)/self.configuration['max_value']])  		# draw the gauge with an initial value
		
		@sub_icons.AddSubIcons(["icon 1", "firefox-3.0", "id1", "icon 3", "thunderbird", "id3", "icon 4", "nautilus", "id4"])	
		@sub_icons.RemoveSubIcon("id2") 												# remove the 2nd icon of our sub-dock
		@sub_icons.SetQuickInfo("1", "id1")  											# write the ID on each icon of the sub-dock
		@sub_icons.SetQuickInfo("3", "id3")
		@sub_icons.SetQuickInfo("4", "id4")
		get_user_actions
	end
	def get_configuration_parameters
		c = {}
		c['max_value'] = @conf.params['Configuration']['max value'].to_i
		c['theme'] = @conf.params['Configuration']['theme']
		c['yes_no'] = @conf.params['Configuration']['yesno'].to_b
		c
	end
	def get_user_actions
		@icon.connect!(:on_click) do |param|
			action_on_click
		end
		@icon.connect!(:on_build_menu) do |param|										# when user right-clicks on our applet (which builds the menu)
			action_on_build_menu														
		end
		@icon.connect!(:on_menu_select) do |menu_id|									# when the user selected some menu build on build_menu action
			action_on_menu_select menu_id
		end
		@icon.connect!(:on_scroll) do |scroll_direction|								# when the user scroll the mouse up or down on the icon
			action_on_scroll scroll_direction											# scroll down param = false, scroll up param = true
		end
		@icon.connect!(:on_drop_data) do |dropped_date|									# something was dragged n dropped into the icon
			action_on_drop_data dropped_date
		end
		@icon.connect!(:on_middle_click) do |param|
			action_on_middle_click
		end
		@icon.connect!(:on_answer) do |answer|											# answer from some Ask* method
			action_on_answer answer
		end
		@icon.connect!(:on_stop_module) do |param|
			action_on_stop  															# DBus plug-in or applet deactivated, or Cairo-Dock stopped
		end
		@sub_icons.connect!(:on_click_sub_icon) do |state, icon_id|
			action_on_click_sub_icon state, icon_id											# when the user left-clicks on a sub-icon
		end
	end

	# callbacks on the main icon
	def action_on_click
		p "[+] roger, right-click"
		render_counter (self.counter+10)
	end
	def action_on_middle_click
		p "[+] yes sir, middle-click received"
		@icon.AskValue("Set the value you want", self.counter, self.configuration['max_value'])
	end
	def action_on_build_menu
		p "[+] let's build the menu"
		@icon.PopulateMenu(["Reset the counter", "Set Medium Value", "Set Max Value"])
	end
	def action_on_menu_select param
		p "[+] let me guess, somebody chose the menu identified by the ID #{param}"
		if param == 0
			render_counter 0
		elsif param == 1
			render_counter self.configuration['max_value']/2
		else
			render_counter self.configuration['max_value']
		end
	end
	def action_on_scroll scroll_up
		p "[+] is there anybody out there scrolling #{scroll_up ? "up" : "down"} on my icon ?"
		if scroll_up
			count = [self.configuration['max_value'], self.counter + 1].min
		else
			count = self.counter - 1
		end
		render_counter count
	end
	def action_on_drop_data dropped_data
		print "[+] ops, someone let #{dropped_data} fall into my icon"
		@icon.SetLabel(dropped_data)
	end
	def action_on_answer answer
		p "[+] answer: #{answer}"
		render_counter answer
	end

	# callbacks on the applet
	def action_on_stop
		p "[+] bye bye"
		exit
	end
	def action_on_reload config_has_changed
		p "[+] our module was reloaded, welcome back!"
		if config_has_changed
			p "[+] and our config has been changed"
			self.configuration = get_configuration_parameters
			@icon.AddDataRenderer("gauge", 1, myApplet.config['theme'])
			@icon.RenderValues([Float(self.counter)/self.configuration['max_value']])
			@sub_icons.RemoveSubIcon("any")
			@sub_icons.AddSubIcons(["icon 1", "firefox-3.0", "id1", "icon 2", "natilus", "id2", "icon 3", "thunderbird", "id3"]) 
		else
			p "[-] but the config is the same"
		end
	end
	
	# callbacks on the sub-icons
	def action_on_click_sub_icon state, icon_id
		p "[+] something tells me that you clicked on the icon #{icon_id}"
	end

	def render_counter cont
		self.counter = cont																# equivalent to the set_count method in demo_python
		percent = Float(self.counter) / self.configuration['max_value']
		@icon.RenderValues([percent])
		@icon.SetQuickInfo("#{self.counter.to_i}")
	end
end

applet = Applet.new applet_object, applet_sub_icons_object, conf
applet.start
RBus.mainloop
