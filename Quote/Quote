#!/usr/bin/python

# This is a part of the external Quote applet for Cairo-Dock
#
# Author: Eduardo Mucelli Rezende Oliveira
# E-mail: edumucelli@gmail.com or eduardom@dcc.ufmg.br
#
# This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

# This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.

# This applet provides a "Quote of the day" feature

import gobject, dbus, os, urllib, ConfigParser, itertools
from dbus.mainloop.glib import DBusGMainLoop
from dbus import glib
from sgmllib import SGMLParser
from urllib import FancyURLopener
from util import log

DBusGMainLoop(set_as_default=True)

class AgentOpener(FancyURLopener):
    """Masked user-agent otherwise the access would be forbidden"""
    version = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11'

class TranslatorParser(SGMLParser):

    def reset(self):                              
        SGMLParser.reset(self)
        self.quote = []
        self.author = []
        self.inside_dt_a_element = False                                            # indica se o parser esta dentro de <dt><a></a></dt> tag
        self.inside_dt_element = False                                              # indica se o parser esta dentro de <dt></dt> tag

        self.inside_dd_element = False                                              # indica se o parser esta dentro de <dd></dd> tag
        self.inside_dd_b_element = False                                            # indica se o parser esta dentro de <dt><b><b></dt> tag
        self.inside_dd_b_a_element = False                                          # indica se o parser esta dentro de <dt><b><a><a><b></dt> tag

    def start_dt(self, attrs):
        for name, value in attrs:
            if name == "class" and value == "quote":                                # <dt class="quote">...</dt>
                self.inside_dt_element = True
    
    def end_dt(self):
        self.inside_dt_element = False

    def start_dd(self, attrs):
        for name, value in attrs:
            if name == "class" and value == "author":                               # <dd class="author">...</dd>
                self.inside_dd_element = True

    def end_dd(self):
        self.inside_dd_element = False

    def start_b(self, attrs):
        if self.inside_dd_element:
            self.inside_dd_b_element = True

    def end_b(self):
        self.inside_dd_b_element = False

    def start_a(self, attrs):
        if self.inside_dt_element:
            self.inside_dt_a_element = True                                        # <dt class="quote"><a>Quote</a></dt>
        if self.inside_dd_b_element:
            self.inside_dd_b_a_element = True                                      # <dd class="author"><b><a>Quote</a></b></dd>

    def end_a(self):
        self.inside_dt_a_element = False
        self.inside_dd_b_a_element = False

    def handle_data(self, text):
        if self.inside_dt_a_element:                                                # estamos dentro de <dt><a>...</a></dt>
            self.quote.append(text)
        if self.inside_dd_b_a_element:                                              # estamos dentro de <dd><b><a>...</a></b></dd>
            self.author.append(text)        

    def parse(self, page):
        self.feed(page)                                                             # feed the parser with the page's html
        self.close()   

class Interface:

    def __init__(self):
        self.author = []
        self.quote = []
    
    def fetch(self):
        parser = TranslatorParser()                                                 # create the parser
        opener = AgentOpener()                                                      # opens the web connection with masked user-agent
        url = "http://www.quotationspage.com/qotd.html"
        try:
            page = opener.open(url)                                                 # get the HTML
        except IOError:
            print ("Problem to open the remote quotation site")
        else:
            parser.parse(page.read())                                               # feed the parser to get the specific content: translated text
            page.close()                                                            # lets close the page connection
            self.quote = parser.quote
            self.author = parser.author
        return self.quote, self.author

class Quote:

    def start(self):
        bus = dbus.SessionBus()
        applet_name = os.path.basename(os.path.abspath("."))                        # name of the applet must the same as the folder
        applet_path = "/org/cairodock/CairoDock/%s" % applet_name                   # path where our object is stored on the bus
        applet_object = bus.get_object("org.cairodock.CairoDock", applet_path)
        icon = dbus.Interface(applet_object, "org.cairodock.CairoDock.applet")

        applet = Applet(icon)
        applet.start()
        
        loop = gobject.MainLoop()
        loop.run()
        sys.exit(0)

class Applet:

    def __init__(self, icon):
        self.icon = icon
        self.authors = None
        self.quotes = None
        self.dialog_active_time = 10                                                # time in seconds that the dialog window will be active
        
    def start(self):
        log ("Applet started")
        self.connect_to_callbacks()
        self.get_quotes_from_web()

    def connect_to_callbacks(self):                                                 # when reiceves the signal named as 1st parameter ...
        self.icon.connect_to_signal("on_click", self.action_on_click)               # ... chama a funcao callback que eh o segundo parametro

    def get_quotes_from_web(self):
        interface = Interface()
        quote, author = interface.fetch()                                           # N-esima quote refere-se ao N-esimo autor. "quote[x] ~ author[x]"
        self.quotes = itertools.cycle(quote)
        self.authors = itertools.cycle(author)

    def action_on_click(self, param):
        self.show_quote()

    def show_quote(self):
        quotation = "\"%s\" ~ %s" % (self.quotes.next(), self.authors.next())
        self.icon.ShowDialog(quotation, self.dialog_active_time)

if __name__ == '__main__':
    Quote().start()
