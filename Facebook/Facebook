#!/usr/bin/python

# This is a part of the external applets for Cairo-Dock
# Copyright : (C) 2011 by Benjamin
# E-mail : jesuisbenjamin@gmail.com
# Thanks to Matttbe, Fabounet and Eduardo for their help on this. 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# http://www.gnu.org/licenses/licenses.html#GPL
#
# This program depends on FBCMD, a command line interface (CLI) for Facebook.
# http://fbcmd.dtompkins.com/ 

####################
### dependancies ###
####################

from __future__ import print_function

from CDApplet import CDApplet, _
import glib
import gtk
import os
import subprocess
from subprocess import PIPE
import sys
import time
import svg_mod
import re

class FaceBook(CDApplet):
	def __init__(self):
		# in fbconfig is stored configuration information
		self.fbconfig = {}
		# in fb is stored data from Facebook
		self.fb = {}
		# recurence is the interval between updates in milliseconds
		self.recurence = int
		# in self.appconfig is the alarm configuration information
		self.appconfig = {}
		# possible values and keys for ATTENTION_HOW in configuration file
		self.HOW_DICT = {0 : 'bounce', 1 : 'blink', 2 : 'pulse', 3 : 'rotate', 4 : 'spot', 5 : 'wave', 6: 'wobbly', 7: 'none'}
		# possible vales and keys for ATTENTION_WHEN in configuration file
		self.WHEN_DICT = {0 : 'superior', 1 : 'alway', 2 : 'different', 4 : 'never'} 
		# self.counter hold the nubner of notifications
		self.counter = 0
		# log file where self.fbcmd and self.fbcmd values are recorded
		self.logfile = 'fbcmd'
		# whether fbcmd is installed
		self.fbcmd = bool
		# message in case fbcmd is not installed:
		self.needfbcmd = "It seems FBCMD is not installed on your computer. You need to install FBCMD for this applet to function: do you agree?"
		# whether fbcmd is authorised on Facebook
		self.fbcmdpass = bool
		# message in case fbcmd is not authorised on Facebook
		self.needpass = "It seems FBCMD has no access to Facebook. Click OK to grant FBCMD access to your account."
		self.needauth = "Now you need to get your get your authorisation code from another page (click OK) and type it in the next dialogue."
		self.needcode = "Did you get your access code? Then in the field below. Otherwise close this dialogue and try again :)"
		# type of dialog poping up "default", "install", "pass", "auth", "code"
		self.dialog_type = 0
		# how should info be displayed on the icon (quickinfo or emblem)
		self.info = "emblem"
		# imported xml data for svg emblem
		self.svg_data = str
		# path where the current svg emblem should be stored
		self.svg_path = str
		# commandline on click
		self.click = "x-www-browser 'http://www.facebook.com/'"
		# name of user fetched from Facebook
		self.fbusername = str
		CDApplet.__init__(self)
		
	def find_fbcmd(self):
		# this method will check whether FBCMD is already installed on the computer
		fbcmd = os.popen("ls /usr/local/bin/ | grep fbcmd").readlines()
		if fbcmd[0] == 'fbcmd\n':
			return True
		else:
			return False
		
	def install_failed(self):
		# this method calls a dialog in case installation fails
		self.icon.ShowDialog("Installation of FBCMD failed. Please proceed manually (http://fbcmd.dtompkins.com)",8)
		sys.exit()
		
	def install_fbcmd(self):
		# this method installs fbcmd
		# first it retrieves the installation file
		retreive = subprocess.call(["curl -O https://github.com/dtompkins/fbcmd/raw/master/fbcmd_update.php"], shell=True)
		# if the download went well it carries on
		if retreive == 0:
			self.icon.ShowDialog("FBCMD update completed, please wait while installing...",3)
			time.sleep(3)
		else:
			self.install_failed()
		# then it grants permission to the file to operate
		update = subprocess.call(["gksudo php fbcmd_update.php sudo"], shell=True)
		# if successful, it continues
		if update == 0:
			self.icon.ShowDialog("Please wait while FBCMD is installing...",5)
		else:
			self.install_failed()
		# finally it installs fbcmd
		installed = subprocess.call(["gksudo php fbcmd_update.php install"], shell=True)
		# if successful it can return
		if installed == 0:
			self.icon.ShowDialog("Hurray! FBCMD's installed!",3)
			self.fbcmd == True
			# dialog_type == will tell fbcmd_steps() it can proceed
			self.dialog_type = 2
		else:
			self.install_failed()
			
	def access_failed(self):
		# in case the procedure of granting fbcmd access to Facebook fails
		# a dialog pops up and the applet quits
		self.icon.ShowDialog("Failed to get access to Facebook. Please proceed manually from command line 'fbcmd auth ******'",8)
		sys.exit()
		
	def access_fbcmd(self, code):
		# this method is taking care of validating the Facebook authorisation code
		# so that fbcmd can work offline
		access = subprocess.call(["fbcmd auth %s" % code])
		if access == 0:
			# double checking:
			self.fbcmdpass = self.check_access() 
			if self.fbcmdpass == True:
				greeting = "Alright", fbusername, "we're connected to Facebook. Let's rock! :)"
				self.icon.ShowDialog(greeting, 3)
				#WRITE FBCMDPASS=true in .conf file!!
				# self.dialog_type = 5 tells fbcmd_steps() it can proceed
				self.dialog_type = 5
			else:
				self.access_failed()
		else:
			self.access_failed()
			
	def fbcmd_steps(self):
		# this method acts as a semaphore to throw dialogs according
		# to the steps achieved in the process of granting access to
		# fbcmd on Facebook. It is initated by self.check_again() which
		# will repeat fbcmd_steps() every two seconds as long the
		# self.dialog_type == 0 and until it reaches the value of 5.
		if self.dialog_type == 1:
			self.icon.PopupDialog({"message" : self.needfbcmd, "buttons" : "ok;cancel"},{})
			self.dialog_type = 11
			return True
		if self.dialog_type == 2:
			self.icon.PopupDialog({"message" : self.needpass, "buttons" : "ok;cancel"},{})
			self.dialog_type = 22
			return True
		elif self.dialog_type == 3:
			self.icon.PopupDialog({"message" : self.needauth, "buttons" : "ok;cancel"},{})
			self.dialog_type = 33
			return True
		elif self.dialog_type == 4:
			time.sleep(6)
			self.icon.PopupDialog({"message" : self.needcode, "buttons" : "ok;cancel"},
			{"widget-type" : "text-entry", "initial value" : "Enter Authorisation Code"})
			self.dialog_type = 44
			return True
		elif self.dialog_type == 5:
			# step 5 consists in recording a log of installation and access
			# then it can start running the applet and repeat
			self.writetolog()
			# Now it can do it's business
			self.update()
			self.repeat()
			# we need to end check_again()
			return False
		else:
			return True
		
	def check_access(self):
		# this method checks if fbcmd has access to facebook
		# it's done by checking the facebook username
		# an opportunity to use it too :)
		data = subprocess.Popen(['fbcmd', 'whoami'], stdout=PIPE).stdout
		data = data.read()
		if len(data) > 0:
			data = data.split()
			self.fbusername  = data[1]
			return True
		else:
			return False
		
	def writetolog(self):
		# in case the app has to look for installation and authorisation
		# this method records it in a log file so it doesn't have to look
		# for it again in the future
		loglist = ['FBCMD', str(self.fbcmd), 'FBCMDPASS', str(self.fbcmdpass)]
		logstring = ' '.join(loglist)
		destination = open(self.logfile, 'w')
		destination.write(logstring)
		destination.close()
		
	def str2bool(self, string):
		# method to convert string to boolean
		return string in ('True')
		
	def get_config(self, keyfile):
		# this is a function inherited from the CDApplet class
		# it will run automatically as the CDApplet instance is initated
		# the keyfiles is the .conf file in the applet's folder
		# check whether the applet has ever seen fbcmd installed
		# and whether it had access to Facebook
		try:
			# this checks whether there is any info in the log file
			log = open(self.logfile, 'r')
			loglist = log.read().split()
			self.fbcmd = self.str2bool(loglist[1])
			self.fbcmdpass = self.str2bool(loglist[-1])
		except:
			#otherwise we set the values to False
			self.fbcmd = False
			self.fbcmdpass = False
		# it checks which notifications the user wants
		# and it appends them to the self.fbconfig dictionary
		self.fbconfig['MESSAGES_UNREAD'] 	= keyfile.getboolean('Configuration', 'MESSAGES_UNREAD')
		self.fbconfig['POKES'] 				= keyfile.getboolean('Configuration', 'POKES')
		self.fbconfig['SHARES_UNREAD'] 		= keyfile.getboolean('Configuration', 'SHARES_UNREAD')
		self.fbconfig['FRIEND_REQUESTS'] 	= keyfile.getboolean('Configuration', 'FRIEND_REQUESTS')
		self.fbconfig['GROUP_INVITES'] 		= keyfile.getboolean('Configuration', 'GROUP_INVITES')
		self.fbconfig['EVENT_INVITES'] 		= keyfile.getboolean('Configuration', 'EVENT_INVITES')
		self.fbconfig['NOTICES_UNREAD']		= keyfile.getboolean('Configuration', 'NOTICES_UNREAD')
		# then it checks when and how the user wants to be informed
		# and it appends that to the self.appconfig dictionary
		self.appconfig['ATTENTION_WHEN']		= self.WHEN_DICT[keyfile.getint('Configuration', 'ATTENTION_WHEN')]
		self.appconfig['ATTENTION_HOW']			= self.HOW_DICT[keyfile.getint('Configuration', 'ATTENTION_HOW')]
		self.appconfig['ATTENTION_DIA']			= keyfile.getboolean('Configuration', 'ATTENTION_DIA')
		self.appconfig['ATTENTION_SOUND']		= keyfile.getboolean('Configuration', 'ATTENTION_SOUND')
		# then it fetches the update interval requested by user in minutes
		# converts it in milliseconds as self.recurence
		r = keyfile.getint('Configuration', 'UPDATE')
		# interval must be at least a minute
		if r < 1:
			self.recurence = 60000
		else:
			self.recurence = r * 60000
		# it checks the user's choice in appearance: emblem or quickinfo
		self.info = keyfile.get('Configuration', 'INFO')
		
		# then it writes the path where the svg file should be stored
		# next to the configuration file
		path = re.search('/.+/', self.cConfFile).group()
		self.svg_path = path+'emblem.svg'
		
	def set_quick_info(self):
		# this method places a quick info displaying the counter
		# if the counter is different from 0
		# depending on the configuration, it displays either a quickinfo or an svg emblem
		if self.info == "quickinfo":
			if self.counter == 0:
				self.icon.SetQuickInfo(format(""))
			else:
				self.icon.SetQuickInfo(format(self.counter))
		else:
			if self.counter == 0:
				# remove emblem, we don't want to display "0"
				#self.icon.SetIcon(os.path.abspath("./icon"))
				self.icon.SetEmblem("", CDApplet.EMBLEM_TOP_RIGHT) 
				pass
			else:
				# write svg emblem
				# data for svg emblem (calling external module svg_mod.py
				self.svg_data = svg_mod.insert_counter(self.counter)
				svg = open(self.svg_path, 'w')
				svg.write(self.svg_data)
				svg.close()
				# rest icon
				#self.icon.SetIcon(os.path.abspath("./icon"))
				# put svg emblem on icon
				self.icon.SetEmblem(self.svg_path, CDApplet.EMBLEM_TOP_RIGHT + CDApplet.EMBLEM_PERSISTENT) 
	
	def check_when(self, diff):
		# this method checks whether the user needs attention or not
		att = self.appconfig["ATTENTION_WHEN"]
		if att == "always" and self.counter != 0:
			return True 
		elif att == "different" and diff != 0:
			return True
		elif att == "superior" and diff < 0:
			return True
		else:
			return False
			
	def attention(self):
		# this method fetches user options from appconfig dictionary
		how = self.appconfig["ATTENTION_HOW"]
		dia = self.appconfig["ATTENTION_DIA"]
		sound = self.appconfig["ATTENTION_SOUND"]
		# then it acts accordingly
		if how == "none":
			pass
		else:
			# self.icon.DemandsAttention(True, how) ## NEED TO FIND OUT HOW TO STOP THIS NEATLY
			self.icon.DemandsAttention(True, how)
		if dia == True:
			# checking our grammar ;)
			if self.counter > 1:
				s = 's'
			else:
				s = ''
			self.icon.ShowDialog("You have "+str(self.counter)+" notification%s on your Facebook Account" % s,3)
		else:
			pass
		if sound == True:
			os.popen('aplay ' + os.path.abspath("./alarm.wav"))
		else:
			pass
		self.icon.DemandsAttention(False, how)
		
	def consider(self):
		# this method will check whether the user should be alarmed
		new_counter = 0
		# it finds out what notifications the user wants ...
		for i in self.fbconfig:
			# ... by omitting those with a value = False
			if self.fbconfig[i] == False:
				pass
			else:
				# then we count the values of each desired nofitication
				# since fbconfig and fb cleverly have the same keys [i] it's a piece of cake!
				new_counter += self.fb[i]
		# it records difference between the current and the prior counter
		diff = self.counter - new_counter
		# it updates the applet's counter
		self.counter = new_counter
		# it requests the quickinfo on the icon:
		self.set_quick_info()
		# it checks whether the user wants to be informed about the new counter value
		need = self.check_when(diff)
		# if indeed the user wants to be informed, the method requests this signal
		if need == True:
			self.attention()
		else:
			pass
		# that's it: now the applet waits for the next update :) 
		
	def error(self):
		#signal the applet is in difficulty by adding a [!] emblem to the icon:
		# reset icon:
		#self.icon.SetIcon(os.path.abspath("./icon"))
		# put warning svg emblem on icon
		self.icon.SetEmblem(os.path.abspath("./warning.svg"), CDApplet.EMBLEM_TOP_RIGHT + CDApplet.EMBLEM_PERSISTENT)  # this emblem is placed at the same position as the count, so when the applet finally succeeds, the error emblem will be automatically removed.
		
	def read_fb(self):
		# reset fblist
		fblist = []
		# this method fetches information from FaceBook with fbcmd
		# it runs the "fbcmd NOTIFY" command, returns and parses results in a "fblist" list
		result = subprocess.Popen(['fbcmd', 'NOTIFY'], stdout=PIPE).stdout
		fblist = result.readlines()
		# if there is no internet connection, the list will be empty
		if fblist != []:
			pass
		else:
			print('...Facebook Applet could not connect to the Internet. Trying later.')
			self.error()
			return False
		# then it omits friend request details and feeds the result into a the "self.fb" dictionary
		for i in fblist:
			ii = i.split()
			try:
				# the required lines end with an integer, but readlines() returns them as strings
				# by attempting to convert the last item of the line into an integer
				# we aslo sort out the junk (i.e. friend request details)
				number = int(ii[-1])
				self.fb[ii[0]] = number
			except:
				pass
		# next the method runs "fbcmd NOTICES unread", returns and parse results in self.fb
		# first fetch the data
		result = subprocess.Popen(['fbcmd', 'NOTICES', 'unread'], stdout=PIPE).stdout
		ls = result.readlines()
		# remove the header if any
		try:
			del ls[0]
			# then count the lines that start with "["
			count = 0
			for i in ls:
				if i[0] == '[':
					count += 1
				else:
					pass
			# finally bring the result in self.fb
			self.fb['NOTICES_UNREAD'] = count
		except:
			self.fb['NOTICES_UNREAD'] = 0
		return True
		
	def update(self):
		# this method updates the information from Facebook
		# but first it needs to know whether the cairo-dock process still exists
		master = self.findcairo()
		# test log
		print("...updating Facebook Applet")
		# now the process can fetch information from Facebook
		# since the findcairo() method should have terminated the program
		# in case cairo-dock does not exist, there is no need to check again
		# the update method continues asking read_fb() to fetch data from Facebook
		try_read = self.read_fb()
		if try_read == True:
			# then it checks whether there is any need to alarm the user
			self.consider()
		else:
			pass
		# returning master=True will tell the repeat method to continue
		return master
		
	def check_again(self):
		# this method will check the steps of installation till fbcmd_steps()
		# returns False
		glib.timeout_add(3000, self.fbcmd_steps)
		
	def begin(self):
		# this is a function inherited from the CDApplet class
		# it will run automatically as the CDApplet instance is initated
		# after the get_config() method:
		# check if fbcmd is installed:
		# the log file should already have provided info, otherwise:
		if self.fbcmd == False:
			# it checks if fbcmd's installed
			self.fbcmd = self.find_fbcmd()
			# if it doesn't suceed:
			if self.fbcmd == False:
				# it guides the user through installation
				self.dialog_type = 1
				self.check_again()
			else:
				pass
		# check if fbcmd has access to Facebook
		# the log file should already have provided info, otherwise:
		if self.fbcmdpass == False:
			# it checks whether fbcmd can get access to Facebook
			self.fbcmdpass = self.check_access()
			# if there seems to be no access:
			if self.fbcmdpass == False:
				# it guides the user through authorisation
				self.dialog_type = 2
				self.check_again()
			else:
				pass
			self.writetolog()
		# if there is both FBCMD and Access
		# and if we haven't gone through the installation steps before
		if self.fbcmd == True and self.fbcmdpass == True and self.dialog_type != 5:
			self.update()
			self.repeat()
		else:
			# if the two conditions are not True, then the steps start all over again
			# hopefully we don't need that since it should have been caught before :)
			self.dialog_type == 1
			self.check_again()
		
	def findcairo(self):
		# this method looks for an existing instance of the cairo-dock process
		# it will return True if the process exists
		# it will shut down the session if it cannot find cairo-dock
		try:
			net = os.popen("ps -C cairo-dock | grep cairo-dock").readlines()[0].split()
			return True
		except:
			# test log
			print("...Facebook Applet can't find cairo-dock...byebye!")
			sys.exit()
	
	def repeat(self):
		# this method repeats a callback (here the self.update method)
		# it will keep on repeating as long as the callback returns True
		glib.timeout_add(self.recurence, self.update)

# CALLBACKS #

	def on_click(self, iState):
		# when the user clicks on the icon, it opens the facebook page
		# more actions will be available in future versions
		subprocess.call([self.click], shell=True)
		
	def on_answer_dialog(self, key, content):
		# this listener works as a counterpart of fbcmd_steps()
		# waiting for user response to change the semaphore
		# response to dialogue 4 asking for authorisation code
		if self.dialog_type == 44:
			# if user cancelled operation
			if key == 1:
				# another chance is given to the user to type the access code
				self.dialog_type = 3
			else:
				self.access_fbcmd(content)
				# keeping the dialog_type == 44 will tell fbcmd_steps()
				# to continue iterating till the access is granted
		# response to dialogue 3 asking for fetch access code
		elif self.dialog_type == 33:
			## if user cancelled operation
			if key == 1:
				self.access_failed()
			else:
				subprocess.call(["x-www-browser 'http://www.facebook.com/code_gen.php?v=1.0&api_key=42463270450'"], shell=True)
				# dialog_type = 4 will send fbcmd_steps() method to next step
				self.dialog_type = 4
		# response to dialogue 2 asking for grant authorisation to applet
		elif self.dialog_type == 22:
			## if user cancelled operation
			if key == 1:
				self.access_failed()
			else:
				subprocess.call(["x-www-browser 'https://www.facebook.com/dialog/oauth?client_id=42463270450&redirect_uri=http://www.facebook.com/connect/login_success.html'"], shell=True)
				# dialog_type = 3 will send fbcmd_steps() method to next step
				self.dialog_type = 3
		# response to dialgoue 1 requesting installation
		elif self.dialog_type == 11:
			if key == 0:
				print("answer is yes")
				# the dialog_type is not reset till installation is complete
				# to prevent other dialogues to stand in the way
				# while type == 11, fbcmd_steps() will keep iterating
				self.install_fbcmd()
			else:
				self.install_failed()
		else:
			#no need to respond to notifications
			pass

if __name__ == '__main__':
	facebook = FaceBook()
	facebook.run()
	#gtk.main()

